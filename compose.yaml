# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# This is docker-compose for local testing, DO NOT USE IN PRODUCTION
services:
  ai4edu-api-server:
    image: ai4edu-api-server:local
    container_name: ai4edu-api-server-local
    build:
      context: .
    volumes:
      - ./ai4edu_api_volume_local:/app/volume_cache:rw
    ports:
      - 8000:5000
    secrets:
      - ai4edu-secret
    networks:
      - localnet
    depends_on:
      db:
        condition: service_healthy
  redis-local-server:
    image: redis/redis-stack:latest
    container_name: redis-stack
    ports:
      - 8001:8001
    networks:
      - localnet
  db:
    image: postgres
    restart: always
    user: postgres
    env_file: ./.env
    volumes:
      # This is the volume that persists the database data between container restarts.
      # Remove this "db-data" volume to start with a fresh database every time.
      - db-data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d
    # If you want to use an external database viewer, uncomment the following "ports" section.
    # NOTE: This will cause port conflicts if you have a local PostgreSQL server running.
#    ports:
#      - 5432:5432
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - localnet
  db-admin:
    image: dpage/pgadmin4:latest
    env_file:
      - ./.env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - 5050:80
    depends_on:
      db:
        condition: service_healthy
    user: root
    volumes:
      - ./db/pgadmin_entrypoint.sh:/entrypoint_custom.sh
    entrypoint: /entrypoint_custom.sh
    networks:
      - localnet
  nginx:
    image: nginx:latest
    env_file: ./.env
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx_conf/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - localnet
    depends_on:
      - ai4edu-api-server

volumes:
  db-data:

networks:
  localnet:
    driver: bridge

secrets:
  ai4edu-secret:
    file: .env


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

