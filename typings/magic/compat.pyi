"""
This type stub file was generated by pyright.
"""

from ctypes import *

"""
Python bindings for libmagic
"""
_libraries = ...
NONE = ...
DEBUG = ...
SYMLINK = ...
COMPRESS = ...
DEVICES = ...
MIME_TYPE = ...
CONTINUE = ...
CHECK = ...
PRESERVE_ATIME = ...
RAW = ...
ERROR = ...
MIME_ENCODING = ...
MIME = ...
APPLE = ...
NO_CHECK_COMPRESS = ...
NO_CHECK_TAR = ...
NO_CHECK_SOFT = ...
NO_CHECK_APPTYPE = ...
NO_CHECK_ELF = ...
NO_CHECK_TEXT = ...
NO_CHECK_CDF = ...
NO_CHECK_TOKENS = ...
NO_CHECK_ENCODING = ...
NO_CHECK_BUILTIN = ...
FileMagic = ...

class magic_set(Structure): ...

magic_t = ...
_open = ...
_close = ...
_file = ...
_descriptor = ...
_buffer = ...
_error = ...
_setflags = ...
_load = ...
_compile = ...
_check = ...
_list = ...
_errno = ...

class Magic:
    def __init__(self, ms) -> None: ...
    def close(self):  # -> None:
        """
        Closes the magic database and deallocates any resources used.
        """
        ...

    def file(self, filename):  # -> str | None:
        """
        Returns a textual description of the contents of the argument passed
        as a filename or None if an error occurred and the MAGIC_ERROR flag
        is set. A call to errno() will return the numeric error code.
        """
        ...

    def descriptor(self, fd):  # -> str | None:
        """
        Returns a textual description of the contents of the argument passed
        as a file descriptor or None if an error occurred and the MAGIC_ERROR
        flag is set. A call to errno() will return the numeric error code.
        """
        ...

    def buffer(self, buf):  # -> str | None:
        """
        Returns a textual description of the contents of the argument passed
        as a buffer or None if an error occurred and the MAGIC_ERROR flag
        is set. A call to errno() will return the numeric error code.
        """
        ...

    def error(self):  # -> str | None:
        """
        Returns a textual explanation of the last error or None
        if there was no error.
        """
        ...

    def setflags(self, flags):  # -> Any:
        """
        Set flags on the magic object which determine how magic checking
        behaves; a bitwise OR of the flags described in libmagic(3), but
        without the MAGIC_ prefix.

        Returns -1 on systems that don't support utime(2) or utimes(2)
        when PRESERVE_ATIME is set.
        """
        ...

    def load(self, filename=...):  # -> Any:
        """
        Must be called to load entries in the colon separated list of database
        files passed as argument or the default database file if no argument
        before any magic queries can be performed.

        Returns 0 on success and -1 on failure.
        """
        ...

    def compile(self, dbs):  # -> Any:
        """
        Compile entries in the colon separated list of database files
        passed as argument or the default database file if no argument.
        The compiled files created are named from the basename(1) of each file
        argument with ".mgc" appended to it.

        Returns 0 on success and -1 on failure.
        """
        ...

    def check(self, dbs):  # -> Any:
        """
        Check the validity of entries in the colon separated list of
        database files passed as argument or the default database file
        if no argument.

        Returns 0 on success and -1 on failure.
        """
        ...

    def list(self, dbs):  # -> Any:
        """
        Check the validity of entries in the colon separated list of
        database files passed as argument or the default database file
        if no argument.

        Returns 0 on success and -1 on failure.
        """
        ...

    def errno(self):  # -> Any:
        """
        Returns a numeric error code. If return value is 0, an internal
        magic error occurred. If return value is non-zero, the value is
        an OS error code. Use the errno module or os.strerror() can be used
        to provide detailed error information.
        """
        ...

def open(flags):  # -> Magic:
    """
    Returns a magic object on success and None on failure.
    Flags argument as for setflags.
    """
    ...

mime_magic = ...
none_magic = ...

def detect_from_filename(filename):  # -> FileMagic:
    """Detect mime type, encoding and file type from a filename

    Returns a `FileMagic` namedtuple.
    """
    ...

def detect_from_fobj(fobj):  # -> FileMagic:
    """Detect mime type, encoding and file type from file-like object

    Returns a `FileMagic` namedtuple.
    """
    ...

def detect_from_content(byte_content):  # -> FileMagic:
    """Detect mime type, encoding and file type from bytes

    Returns a `FileMagic` namedtuple.
    """
    ...
